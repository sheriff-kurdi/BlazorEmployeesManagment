@page "/editEmployee/{id}"
@inject BlazorEmployeesManagment.Web.Services.EmployeesServices employeesService
@inject BlazorEmployeesManagment.Web.Services.DepartmentsService departmentsService

@if (Employee == null)
{

}
else
{

    <EditForm Model="@EditEmployeeModel" OnValidSubmit=@HandleValidSubmit>

        <DataAnnotationsValidator />
        <ValidationSummary />

        <h3>Edit Employee</h3>
        <hr />

        <div class="form-group row">
            <label for="firstName" class="col-sm-2 col-form-label">
                First Name
            </label>
            <div class="col-sm-10">
                <InputText id="firstName" class="form-control" placeholder="First Name"
                           @bind-Value="EditEmployeeModel.FirstName" />
                <ValidationMessage For="@(()=> Employee.FirstName)" />
            </div>
        </div>

        <div class="form-group row">
            <label for="lastName" class="col-sm-2 col-form-label">
                Last Name
            </label>
            <div class="col-sm-10">
                <InputText id="lastName" class="form-control" placeholder="Last Name"
                           @bind-Value="EditEmployeeModel.LastName" />
            </div>
        </div>

        <div class="form-group row">
            <label for="email" class="col-sm-2 col-form-label">
                Email
            </label>
            <div class="col-sm-10">
                <InputText id="email" class="form-control" placeholder="Email"
                           @bind-Value="EditEmployeeModel.Email" />
            </div>
        </div>

        <div class="form-group row">
            <label for="ConfirmEmail" class="col-sm-2 col-form-label">
                Confirm Email
            </label>
            <div class="col-sm-10">
                <InputText id="email" class="form-control" placeholder="Confirm Email"
                           @bind-Value="EditEmployeeModel.ConfirmEmail" />
            </div>
        </div>

        <div class="form-group row">
            <label for="department" class="col-sm-2 col-form-label">
                Department
            </label>
            <div class="col-sm-10">

                <InputSelect id="department" @bind-Value="DepartmentId" class="form-control">
                    @foreach (var dept in Departments)
                        {
                        <option value="@dept.DepartmentId">@dept.DepartmentName</option>
                        }
                    /**/
                    /**/
                    /**/
                    /**/
                    /**/
                    /**/
                    /**/
                </InputSelect>
            </div>
        </div>

        <div class="form-group row">
            <label for="gender" class="col-sm-2 col-form-label">
                Gender
            </label>
            <div class="col-sm-10">

                <InputSelect id="gender" @bind-Value="EditEmployeeModel.Gender" class="form-control">
                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                        {
                        <option value="@gender">@gender</option>
                        }
                    /**/
                    /**/
                    /**/
                    /**/
                </InputSelect>

            </div>
        </div>

        <div class="form-group row">
            <label for="dateOfBirth" class="col-sm-2 col-form-label">
                Date of birth
            </label>
            <div class="col-sm-10">

                <InputDate id="dateOfBirth" @bind-Value="Employee.DateOfBrith" class="form-control" />


            </div>
        </div>

        <button class="btn btn-primary" type="submit">Submit</button>

    </EditForm>
}


@code {
    [Inject]
    public BlazorEmployeesManagment.Web.Services.EmployeesServices employeesServices { get; set; }

    [Parameter]
    public string Id { get; set; }

    public BlazorEmployeesManagment.Web.Models.Employee Employee { get; set; }
    public IEnumerable<BlazorEmployeesManagment.Web.Models.Department> Departments { get; set; }
    public string DepartmentId { get; set; }

    public EditEmployeeModel EditEmployeeModel { get; set; } = new EditEmployeeModel();

    [Inject]
    public NavigationManager Navigation { get; set; }
    [Inject]
    public AutoMapper.IMapper Mapper { get; set; }

    protected async override Task OnInitializedAsync()
    {
        Employee = await employeesService.GetById(int.Parse(Id));
        Departments = await departmentsService.GetAll();
        DepartmentId = Employee.DepartmentId.ToString();

        Mapper.Map(Employee, EditEmployeeModel);

    }

    private async void HandleValidSubmit()
    {
        Mapper.Map(EditEmployeeModel, Employee);
        await employeesService.Update(Employee.Id, Employee);

        Navigation.NavigateTo("/EmployeesList");
    }





}
